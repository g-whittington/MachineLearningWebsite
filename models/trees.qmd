---
title: "Classification Tree"
toc: true
format: 
  html: 
    embed-resources: true
---

## Model Overview

A decision tree is a non-parametric supervised learning algorithm, which is utilized for both classification and regression tasks. It has a hierarchical, tree structure, which consists of a root node, branches, internal nodes and leaf nodes.

## Libraries
```{r}
#| label: libraries
#| message: false

library(tidymodels)
```

## Data
```{r}
#| label: load-data

analysis_train <- readRDS("data/analysis_train.rds")
analysis_folds <- readRDS("data/analysis_folds.rds")
```

```{r}
#| label: eda
#| include: false

# like totally already know the data
```

## Model Recipe
```{r}
#| label: model-recipe

tree_recipe <-
  recipe(WeaponCarryingSchool ~ ., data = analysis_train) |> 
  step_impute_mode(all_nominal_predictors()) |> 
  step_impute_mean(all_numeric_predictors())

tree_recipe
```

## Model Specification
```{r}
#| label: model-spec

tree_spec <- 
  decision_tree(
    cost_complexity = tune(),
    tree_depth = tune(),
    min_n = tune(),
  ) |> 
  set_engine("rpart") |> 
  set_mode("classification")

tree_spec
```

## Model Workflow
```{r}
#| label: model-workflow

tree_workflow <-
  workflow() |> 
  add_recipe(tree_recipe) |> 
  add_model(tree_spec)

tree_workflow
```

## Grid Search Cross Validation
```{r}
#| label: grid-search-cv

tree_grid <- grid_regular(
  cost_complexity(),
  tree_depth(c(2,5)),
  min_n(),
  levels = 2
)

tree_grid
```

```{r}
#| echo: false

tree_tune <- readRDS("model_outputs/tree_tune.rds")
```

## Hyperparameter Tuning
```{r}
#| label: model-tuning
#| eval: false

tree_tune <-
  tree_workflow |> 
  tune_grid(
    resamples = analysis_folds,
    grid = tree_grid,
    metrics = metric_set(roc_auc),
    control = control_grid(save_pred = TRUE)
  )

saveRDS(tree_tune, "model_outputs/tree_tune.rds")

tree_tune
```

```{r}
#| echo: false

tree_tune
```

```{r}
#| label: model-so-good

show_best(tree_tune, metric = "roc_auc")
```

```{r}
#| label: fig-model-so-good

best_plot_tree <- autoplot(tree_tune)

best_plot_tree
```

```{r}
#| label: best-tree

best_tree <- select_best(tree_tune, metric = "roc_auc")

best_tree
```

## Finalize Model Workflow
```{r}
#| label: model-finalize

tree_final_workflow <- finalize_workflow(tree_workflow, best_tree)

tree_final_workflow
```

```{r}
#| echo: false

tree_fit <- readRDS("model_outputs/tree_fit.rds")
```

## Fit the Model
```{r}
#| label: model-fit
#| eval: false

tree_fit <- fit(tree_final_workflow, analysis_train)

saveRDS(tree_fit, "model_outputs/tree_fit.rds")

tree_fit
```

```{r}
#| echo: false

tree_fit
```

## Make Model Predictions
```{r}
#| label: model-prediction

tree_pred <- 
  augment(tree_fit, analysis_train) |> 
  select(WeaponCarryingSchool, .pred_class, .pred_1, .pred_0)

tree_pred
```

## ROC Plot
```{r}
#| label: fig-tree-roc
#| eval: false

roc_tree <- 
  tree_pred |> 
  roc_curve(
    truth = WeaponCarryingSchool,
    .pred_1,
    event_level = "second"
  ) |> 
  autoplot()

saveRDS(roc_tree, "roc_graphs/tree.rds")

roc_tree
```

```{r}
#| echo: false
roc_tree <- readRDS("roc_graphs/tree.rds")

roc_tree
```

```{r}
#| label: model-roc-auc

tree_pred |> 
  roc_auc(
    truth = WeaponCarryingSchool,
    .pred_1,
    event_level = "second"
  )
```

## Resample Metrics
```{r}
#| label: resample-metrics

fit_resamples(tree_final_workflow, resamples = analysis_folds) |> 
  collect_metrics()
```

## Decision Tree Plots
```{r}
#| label: fig-tree-plot

tree_fit |> 
  extract_fit_engine() |> 
  rpart.plot::rpart.plot(roundint = FALSE)
```
